"""
This type stub file was generated by pyright.
"""

import asyncio
import atexit
import contextlib
import functools
import inspect
import logging
import os
import re
import textwrap
import time
import traceback
import unittest

import asyncpg
from asyncpg import cluster as pg_cluster
from asyncpg import connection as pg_connection
from asyncpg import pool as pg_pool

from . import fuzzer

@contextlib.contextmanager
def silence_asyncio_long_exec_warning(): ...
def with_timeout(timeout): ...

class TestCaseMeta(type(unittest.TestCase)):
    TEST_TIMEOUT = ...
    def __new__(mcls, name, bases, ns): ...

class TestCase(unittest.TestCase, metaclass=TestCaseMeta):
    @classmethod
    def setUpClass(cls): ...
    @classmethod
    def tearDownClass(cls): ...
    def setUp(self): ...
    def tearDown(self): ...
    @contextlib.contextmanager
    def assertRunUnder(self, delta): ...
    @contextlib.contextmanager
    def assertLoopErrorHandlerCalled(self, msg_re: str): ...
    def loop_exception_handler(self, loop, context): ...

_default_cluster = ...

def create_pool(
    dsn=...,
    *,
    min_size=...,
    max_size=...,
    max_queries=...,
    max_inactive_connection_lifetime=...,
    setup=...,
    init=...,
    loop=...,
    pool_class=...,
    connection_class=...,
    record_class=...,
    **connect_kwargs
): ...

class ClusterTestCase(TestCase):
    @classmethod
    def get_server_settings(cls): ...
    @classmethod
    def new_cluster(cls, ClusterCls, *, cluster_kwargs=..., initdb_options=...): ...
    @classmethod
    def start_cluster(cls, cluster, *, server_settings=...): ...
    @classmethod
    def setup_cluster(cls): ...
    @classmethod
    def setUpClass(cls): ...
    @classmethod
    def tearDownClass(cls): ...
    @classmethod
    def get_connection_spec(cls, kwargs=...): ...
    @classmethod
    def connect(cls, **kwargs): ...
    def setUp(self): ...
    def tearDown(self): ...
    def create_pool(self, pool_class=..., connection_class=..., **kwargs): ...

class ProxiedClusterTestCase(ClusterTestCase):
    @classmethod
    def get_server_settings(cls): ...
    @classmethod
    def get_proxy_settings(cls): ...
    @classmethod
    def setUpClass(cls): ...
    @classmethod
    def tearDownClass(cls): ...
    @classmethod
    def get_connection_spec(cls, kwargs): ...
    def tearDown(self): ...

def with_connection_options(**options): ...

class ConnectedTestCase(ClusterTestCase):
    def setUp(self): ...
    def tearDown(self): ...
