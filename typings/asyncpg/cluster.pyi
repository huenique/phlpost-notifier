"""
This type stub file was generated by pyright.
"""

_system = ...
if _system == "Windows":
    def platform_exe(name): ...

else:
    def platform_exe(name): ...

def find_available_port(): ...

class ClusterError(Exception): ...

class Cluster:
    def __init__(self, data_dir, *, pg_config_path=...) -> None: ...
    def get_pg_version(self): ...
    def is_managed(self): ...
    def get_data_dir(self): ...
    def get_status(self): ...
    async def connect(self, loop=..., **kwargs): ...
    def init(self, **settings):
        """Initialize cluster."""
        ...
    def start(self, wait=..., *, server_settings=..., **opts):
        """Start the cluster."""
        ...
    def reload(self):  # -> None:
        """Reload server configuration."""
        ...
    def stop(self, wait=...): ...
    def destroy(self): ...
    def get_connection_spec(self): ...
    def override_connection_spec(self, **kwargs): ...
    def reset_wal(self, *, oid=..., xid=...): ...
    def reset_hba(self):  # -> None:
        """Remove all records from pg_hba.conf."""
        ...
    def add_hba_entry(
        self, *, type=..., database, user, address=..., auth_method, auth_options=...
    ):  # -> None:
        """Add a record to pg_hba.conf."""
        ...
    def trust_local_connections(self): ...
    def trust_local_replication_by(self, user): ...

class TempCluster(Cluster):
    def __init__(
        self,
        *,
        data_dir_suffix=...,
        data_dir_prefix=...,
        data_dir_parent=...,
        pg_config_path=...
    ) -> None: ...

class HotStandbyCluster(TempCluster):
    def __init__(
        self,
        *,
        master,
        replication_user,
        data_dir_suffix=...,
        data_dir_prefix=...,
        data_dir_parent=...,
        pg_config_path=...
    ) -> None: ...
    def init(self, **settings):  # -> str:
        """Initialize cluster."""
        ...
    def start(self, wait=..., *, server_settings=..., **opts): ...

class RunningCluster(Cluster):
    def __init__(self, **kwargs) -> None: ...
    def is_managed(self): ...
    def get_connection_spec(self): ...
    def get_status(self): ...
    def init(self, **settings): ...
    def start(self, wait=..., **settings): ...
    def stop(self, wait=...): ...
    def destroy(self): ...
    def reset_hba(self): ...
    def add_hba_entry(
        self, *, type=..., database, user, address=..., auth_method, auth_options=...
    ): ...
